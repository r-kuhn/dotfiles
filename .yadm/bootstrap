#!/usr/bin/env bash

# Because Git submodule commands cannot operate without a work tree, they must
# be run from within $HOME (assuming this is the root of your dotfiles)
cd "$HOME"

echo "Init submodules"
yadm submodule update --recursive --init

system_type=$(uname -s)
if [ "$system_type" = "Darwin" ]; then
	# Make sure we are using the homebrew in the home directory
	export PATH=${HOME}/homebrew/bin:${PATH}

	git -C "$(brew --repo homebrew/core)" fetch --unshallow || true
	brew update
	# brew install coreutils git nodejs repo gnupg neovim golang sqlite zsh unrar telnet python python2 yadm wget findutils htop mediainfo imagemagick gpg2 shellcheck ripgrep reattach-to-user-namespace direnv

	brew tap caskroom/fonts
	brew cask install font-fira-code font-fira-code-nerd-font

	if [ -d "$HOME/.iterm2" ]; then
		echo "Setting iTerm preference folder"
		defaults write com.googlecode.iterm2 PrefsCustomFolder "$HOME/.iterm2"
	fi

	if [ -d "$HOME/.config/fonts" ]; then
		for f in "$HOME/.config/fonts/*"; do
			cp -f $f ~/Library/Fonts/
		done
	fi

	echo "Disabling auto-correct"
	defaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool false
	echo "Showing all filename extensions in Finder by default"
	defaults write NSGlobalDomain AppleShowAllExtensions -bool true
	echo "Showing status bar in Finder by default"
	defaults write com.apple.finder ShowStatusBar -bool true
	echo "Avoiding the creation of .DS_Store files on network volumes"
	defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true
	echo "Disabling press-and-hold for keys in favor of a key repeat"
	defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false

	npm install -g jshint eslint neovim

	# Python stuff
	pip2 install --user setuptools
	pip2 install --user wheel
	pip2 install --user neovim
	pip2 install --user powerline-status
	pip2 install --user psutil

	pip3 install --user setuptools
	pip3 install --user wheel
	pip3 install --user neovim
	pip3 install --user pylint
	pip3 install --user flake8
	pip3 install --user pgcli

	# Symlink in the vscode settings for Mac
	if [ ! -L "$HOME/Library/Application Support/Code/User/snippets" ]; then
		echo "Symlink in VSCode snippets"
		rm -rf "$HOME/Library/Application Support/Code/User/snippets"
		ln -sf "$HOME/.config/vscode/snippets" "$HOME/Library/Application Support/Code/User/snippets"
	fi
	if [ ! -L "$HOME/Library/Application Support/Code/User/settings.json" ]; then
		echo "Symlink in VSCode settings.json"
		rm -rf "$HOME/Library/Application Support/Code/User/settings.json"
		ln -sf "$HOME/.config/vscode/settings.json" "$HOME/Library/Application Support/Code/User/settings.json"
	fi
	if [ ! -L "$HOME/Library/Application Support/Code/User/vsicons.settings.json" ]; then
		echo "Symlink in VSCode vsicons.settings.json"
		rm -rf "$HOME/Library/Application Support/Code/User/vsicons.settings.json"
		ln -sf "$HOME/.config/vscode/settings.json" "$HOME/Library/Application Support/Code/User/vsicons.settings.json"
	fi
fi

if [[ "$system_type" == "Linux" ]]; then
	if [ -e /etc/arch-release ]; then
		sudo pacman -S shellcheck zsh neovim npm ripgrep
    yay otf-nerd-fonts-fira-code visual-studio-code-bin powerline python-pygit2
	else
		echo "not installing packages on ubuntu"
	  # apt install nodejs neovim python3-dev shellcheck powerline zsh git npm python-pip direnv
		fc-cache -f
	fi

	# NPM stuff
	npm install -g jshint eslint neovim

	# Python stuff
	#sudo pip install --upgrade pip
	#sudo pip install --user setuptools
	#sudo pip install --user neovim

	if [ -e /etc/arch-release ]; then
		sudo pip3 install --upgrade pip
		sudo pip3 install --user setuptools
		sudo pip3 install --user neovim
		sudo pip3 install --user pylint
		sudo pip3 install --user flake8
	else
		pip install --upgrade pip
		pip install --user setuptools
		pip install --user neovim
		pip install --user pylint
		pip install --user flake8
	fi
fi

# Setup VIM
if command -v nvim >/dev/null 2>&1; then
	echo "Bootstraping nvim"
	nvim '+PlugInstall' '+UpdateRemotePlugins' '+PlugUpdate' '+PlugClean!' '+PlugUpdate' '+qall'
fi

